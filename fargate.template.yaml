AWSTemplateFormatVersion: '2010-09-09'

Resources:
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSTaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: LambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt LambdaLB.Arn

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ecs/lambda-dispatch-router
      RetentionInDays: 7

  ECSFargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: lambda-dispatch-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Cpu: '256'
      Memory: '512'
      RuntimePlatform:
        CpuArchitecture: 'ARM64'
        OperatingSystemFamily: 'LINUX'
      ContainerDefinitions:
        - Name: lambda-dispatch-router
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/lambda-dispatch-router:latest'
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          PortMappings:
            - ContainerPort: 5002  # Lambda ReverseRouter port
              HostPort: 5002
              Protocol: tcp
            - ContainerPort: 5001 # IncomingRequest port
              HostPort: 5001
              Protocol: tcp
            - ContainerPort: 5003 # IncomingRequest port
              HostPort: 5003
              Protocol: tcp

  ECSFargateService:
    Type: AWS::ECS::Service
    DependsOn: 
      - ECSCluster
      - FargateListener
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSFargateTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSFargateSG
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: lambda-dispatch-router
          ContainerPort: 5002
          TargetGroupArn: !Ref FargateTargetGroup

  ECSCluster:
    Type: AWS::ECS::Cluster

  # Security Group used by the tasks
  ECSFargateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS Fargate
      VpcId: !Ref MyVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !GetAtt MyVPC.CidrBlock
        - IpProtocol: '-1'
          DestinationPrefixListId: 'pl-7ba54012' # US East 2 S3 Prefix List
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5002
          ToPort: 5002
          CidrIp: !GetAtt MyVPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          CidrIp: !GetAtt MyVPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 5003
          ToPort: 5003
          CidrIp: !GetAtt MyVPC.CidrBlock

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  VPCEndpointsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the ECR Endpoints
      VpcId: !Ref MyVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !GetAtt MyVPC.CidrBlock
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !GetAtt MyVPC.CidrBlock

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  CloudWatchLogsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointsSG
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DynamoDBVPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable

  LambdaVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.lambda
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointsSG
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # This is needed because ECR stores the image layers in S3
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable

  ECRDKRVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointsSG
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  ECRAPIVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointsSG
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  ECSLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS Fargate
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ECSFargateLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: VPCGatewayAttachment
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ECSLoadBalancerSG
      Scheme: internet-facing

  LambdaDispatchRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z005084420J9MD9JNBCUK
      Name: lambdadispatch.ghpublic.pwrdrvr.com.
      Type: A
      AliasTarget:
        DNSName: !GetAtt ECSFargateLoadBalancer.DNSName
        HostedZoneId: !GetAtt ECSFargateLoadBalancer.CanonicalHostedZoneID

  DirectLambdaRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z005084420J9MD9JNBCUK
      Name: directlambda.ghpublic.pwrdrvr.com.
      Type: A
      AliasTarget:
        DNSName: !GetAtt ECSFargateLoadBalancer.DNSName
        HostedZoneId: !GetAtt ECSFargateLoadBalancer.CanonicalHostedZoneID

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: lambdadispatch.ghpublic.pwrdrvr.com
      SubjectAlternativeNames:
        - directlambda.ghpublic.pwrdrvr.com
      DomainValidationOptions:
        - DomainName: lambdadispatch.ghpublic.pwrdrvr.com
          HostedZoneId: Z005084420J9MD9JNBCUK
        - DomainName: directlambda.ghpublic.pwrdrvr.com
          HostedZoneId: Z005084420J9MD9JNBCUK
      ValidationMethod: DNS

  FargateListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FargateTargetGroup
      LoadBalancerArn: !Ref ECSFargateLoadBalancer
      Port: 80
      Protocol: HTTP
  
  FargateHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ECSFargateLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FargateTargetGroup

  FargateTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSFargateLoadBalancer
    Properties:
      HealthCheckPath: /health
      Port: 5002
      Protocol: HTTP
      VpcId: !Ref MyVPC
      TargetType: ip
      # Shorten the healthcheck intervals and number of required successes
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2

  LambdaLBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: LambdaDispatchDemo
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  LambdaLBExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaVPCAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                Resource: !GetAtt LambdaLBTable.Arn
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  LambdaLBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS Fargate
      VpcId: !Ref MyVPC
      # Allow all outbound TCP traffic
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !GetAtt MyVPC.CidrBlock
        - IpProtocol: '-1'
          DestinationPrefixListId: 'pl-4ca54025' # US East 2 DynamoDB Prefix List

  LambdaLB:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "lambda-dispatch-lambdalb"
      Role: !GetAtt LambdaLBExecutionRole.Arn
      Code:
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/lambda-dispatch-lambdalb:latest
      MemorySize: 256
      Timeout: 60
      PackageType: "Image"
      Architectures:
        - arm64
      VpcConfig:
        SecurityGroupIds: [!Ref LambdaLBSG]
        SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]

  DirectLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "lambda-dispatch-directlambda"
      Role: !GetAtt LambdaLBExecutionRole.Arn
      Code:
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/lambda-dispatch-directlambda:latest
      MemorySize: 256
      Timeout: 60
      PackageType: "Image"
      Architectures:
        - arm64
      VpcConfig:
        SecurityGroupIds: [!Ref LambdaLBSG]
        SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]

  DirectLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DirectLambda.Arn
      Principal: elasticloadbalancing.amazonaws.com

  DirectLambdaTargetGroup:
    DependsOn:
      - DirectLambdaInvokePermission
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt DirectLambda.Arn

  DirectLambdaListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DirectLambdaTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - directlambda.ghpublic.pwrdrvr.com
      ListenerArn: !Ref FargateHttpsListener
      Priority: 1

Outputs:
  LoadBalancerDNS:
    Description: DNS Name of the Load Balancer
    Value: !GetAtt ECSFargateLoadBalancer.DNSName

