# Use the official .NET 8 SDK image as the build environment
# Build with whatever CPU the host OS has
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build-env

# Needed for Native AOT compilation
RUN apt update
RUN apt install -y clang zlib1g-dev libssl-dev cmake

# Set the working directory
WORKDIR /app

# Copy just files needed for dotnet restore
COPY *.sln ./
COPY src/PwrDrvr.LambdaDispatch.LambdaLB/PwrDrvr.LambdaDispatch.LambdaLB.csproj ./src/PwrDrvr.LambdaDispatch.LambdaLB/
COPY src/PwrDrvr.LambdaDispatch.Messages/PwrDrvr.LambdaDispatch.Messages.csproj ./src/PwrDrvr.LambdaDispatch.Messages/

# Restore dependencies
RUN dotnet restore src/PwrDrvr.LambdaDispatch.LambdaLB/PwrDrvr.LambdaDispatch.LambdaLB.csproj

# Copy everything from the current directory to the working directory in the image
COPY . ./

# Build the project
ARG BUILD_ARCH=linux-arm64
RUN dotnet publish src/PwrDrvr.LambdaDispatch.LambdaLB/PwrDrvr.LambdaDispatch.LambdaLB.csproj -c Release --self-contained true --runtime $BUILD_ARCH -o out /p:NativeAot=true

# We do not need the ~40 MB of ICU libs
RUN rm out/libicu* || true


#
# Build the node.js app
#
# Build with whatever CPU the host OS has
FROM node:20-alpine AS node-build-env

# Set the working directory
WORKDIR /app

# Copy just files needed for npm install
COPY src/demo-app/package.json src/demo-app/package-lock.json ./

# Install dependencies
RUN npm install

# Copy everything from the current directory to the working directory in the image
COPY src/demo-app/ ./

# Build the app
RUN npm run build


#
# Use the Amazon Linux 2023 image as the runtime environment
#
FROM public.ecr.aws/lambda/provided:al2023 as libs

# If using lambda/provided:al2023 as the runtime, we need to install Node
# RUN dnf install -y nodejs


# This almost works, but the bootstrap app gives this error:
#   Cannot get required symbol EVP_rc2_cbc from libssl
#   This indicates that we need to copy in libssl from the build environment
FROM public.ecr.aws/lambda/nodejs:20

# Set the working directory
WORKDIR /app

# Copy the build output from the build environment
# This is a self-contained single binary file
COPY --from=build-env /app/out/bootstrap .

# Copy the node.js app
COPY --from=node-build-env /app/dist/ dist/
COPY --from=node-build-env /app/startapp.sh ./

# Set the entrypoint
ENTRYPOINT ["./bootstrap"]
